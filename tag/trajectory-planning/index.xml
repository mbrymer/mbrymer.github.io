<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Trajectory Planning | Matt Brymer</title><link>https://mbrymer.github.io/tag/trajectory-planning/</link><atom:link href="https://mbrymer.github.io/tag/trajectory-planning/index.xml" rel="self" type="application/rss+xml"/><description>Trajectory Planning</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><image><url>https://mbrymer.github.io/media/icon_hu1de1b76137c20b64cb0e309cf8549bbd_20734_512x512_fill_lanczos_center_3.png</url><title>Trajectory Planning</title><link>https://mbrymer.github.io/tag/trajectory-planning/</link></image><item><title>Hierarchical Trajectory Planning for Quadrotor Flight in Unknown Environments</title><link>https://mbrymer.github.io/project/quadrotor_trajectory_planning/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://mbrymer.github.io/project/quadrotor_trajectory_planning/</guid><description>&lt;p>&lt;a href="https://github.com/evandanrao/slower" target="_blank" rel="noopener">&lt;strong>GitHub Repo&lt;/strong>&lt;/a> &lt;strong>|&lt;/strong> &lt;strong>&lt;a href="https://mbrymer.github.io/uploads/AER_1516_Project_Report.pdf" target="_blank">Project Report&lt;/a>&lt;/strong> &lt;strong>| Project Partners&lt;/strong>: &lt;a href="https://www.linkedin.com/in/evandanrao/" target="_blank" rel="noopener">Vandan Rao&lt;/a>, Furqan Ahmed, Sangita Sahu&lt;/p>
&lt;p>This was a course project where my teammates and I studied the problem of trajectory planning for high speed quadrotor flight in unknown environments.&lt;/p>
&lt;h2 id="overview">&lt;strong>Overview&lt;/strong>&lt;/h2>
&lt;p>Motion planning in environments that are unknown apriori and only discovered during motion is challenging for traditional random sampling planners(RRT* etc.) because it requires constantly updating the tree during motion as new obstacles are observed. Many samples end up becoming wasted when new obstacles invalidate entire sections of the tree. This reduces the feasible safe flight speed on computationally constrained platforms, such as quadrotors.&lt;/p>
&lt;p>Numerous alternate approaches exist for this problem class, one of which is hierarchical planners. These use a fast, low order global planner to generate a simple collision free path that is then refined by a local planner to generate a dynamically feasible trajectory over a receding planning horizon, usually by solving an optimization problem. For this project we investigated these methods by implementing a simplified version of the FASTER planner [1].&lt;/p>
&lt;h2 id="approach">&lt;strong>Approach&lt;/strong>&lt;/h2>
&lt;p>The full details of the algorithm are available in the original paper, but I&amp;rsquo;ll summarize it briefly here. For global planning FASTER uses Jump Point Search (JPS) to generate a collision free shortest piecewise linear path to the goal location. It then performs a convex decomposition of the free space surrounding each path segment to generate a set of polytopes within which the path can lie. The local plan is parameterized with a set of piecewise continuous Bezier curves and an optimization problem is solved to find a set of spline control points that minimize the squared jerk while maintaining continuity between segments, respecting vehicle dynamic limits and remaining collision free. The convex hull property of Bezier curves is used to reduce collision checking to keeping the control points of each segment within at least one polytope, simplifying it to a set of linear constraints. This requires adding binary variables to allocate each segment to a polytope, promoting the problem to a MIQP.&lt;/p>
&lt;p>FASTER generates two plans, one termed the full trajectory where it plans in both the free known and unknown space and another only in the free known space, termed the safe trajectory. The full trajectory is an optimistic plan that allows for higher speeds, but safety is maintained by being able to divert to a known collision free trajectory if a feasible solution cannot be found for the full trajectory. To reduce scope for this project we eliminated the full trajectory and planned only in the free known space, which sacrifices speed to maintain safety. The picture below shows our version, which we jokingly referred to as SLOWER.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="slower" srcset="
/project/quadrotor_trajectory_planning/images/slower_hu25b34b4d479de711a3efee8f30a1e4b2_80976_53c37a23ed886e039d811206189d43ce.webp 400w,
/project/quadrotor_trajectory_planning/images/slower_hu25b34b4d479de711a3efee8f30a1e4b2_80976_a102f3574851b1d9455328c4bea3b277.webp 760w,
/project/quadrotor_trajectory_planning/images/slower_hu25b34b4d479de711a3efee8f30a1e4b2_80976_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_trajectory_planning/images/slower_hu25b34b4d479de711a3efee8f30a1e4b2_80976_53c37a23ed886e039d811206189d43ce.webp"
width="760"
height="516"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;!-- Collision checking occurs by making use of the convex hull property of Bezier curves, which states that all points on the curve lie within the convex hull of its control points. This means keeping all control points of one segment within at least one polytope guarantees that segment is collision free, reducing collision checking to a set of linear inequality constraints on the control point locations. This also means that each curve segment must be assigned to a particular polytope, which the authors do by adding binary variables indicating if a segment is assigned to a particular polytope. These binary variables are then used to turn on or off the corresponding collision constraints and constrained such that a segment must be assigned to at least one polytope. The authors refer to this approach as interval allocation. The added binary variables makes the optimization problem a Mixed Integer Quadratic Program(MIQP). -->
&lt;p>The time allocated for the trajectory is another important consideration as lower time will drive higher vehicle speed and acceleration. FASTER handles this by assigning a constant time for the entire trajectory, evenly split between curve segments. The total time uses a heuristic that takes the minimum time to achieve the desired position/velocity/acceleration over the planning horizon and multiplies by a scale factor to account for path curvature. The scale factor is increased or decreased between replanning iterations depending on if a feasible solution was found in a form of line search to attempt to find the fastest possible trajectory time.&lt;/p>
&lt;p>We implemented the planner in a series of Python ROS nodes, one for each major step including the mapper (Furqan), global planner (Sangita), convex decomposition (Vandan) and local planner (myself). We tested it in Gazebo simulations making use of the quadrotor simulator used by the original authors in their &lt;a href="https://github.com/mit-acl/faster" target="_blank" rel="noopener">GitHub repository&lt;/a>[2].&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="ros_architecture" srcset="
/project/quadrotor_trajectory_planning/images/ros_arch_huc57d92bee57b5fd95d785edff58d2f1a_74410_96bc047a42f5dde52436b99f909fa24f.webp 400w,
/project/quadrotor_trajectory_planning/images/ros_arch_huc57d92bee57b5fd95d785edff58d2f1a_74410_ec3b5112c31a00fb28aa1adb4b8a8ade.webp 760w,
/project/quadrotor_trajectory_planning/images/ros_arch_huc57d92bee57b5fd95d785edff58d2f1a_74410_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_trajectory_planning/images/ros_arch_huc57d92bee57b5fd95d785edff58d2f1a_74410_96bc047a42f5dde52436b99f909fa24f.webp"
width="760"
height="593"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="my-contributions">&lt;strong>My Contributions&lt;/strong>&lt;/h2>
&lt;p>For my part, I lead the definition of the ROS architecture and software interfaces as well as writing the local planner and master node.&lt;/p>
&lt;p>The local planner at each replanning iteration defined the optimization problem, called the MOSEK optimization solver and then stored the result so that the time interpolated trajectory could be output at the higher frequency needed for motion. Replanning was performed at 10 Hz and the desired position and velocity were output at 100 Hz to the simulator.&lt;/p>
&lt;p>I also studied an alternate problem formulation where instead of the time allocation being set and path segments being able to float between intervals, the time allocation to each interval was made a decision variable and a fixed number of segments was used for each interval. The rationale was that jointly optimizing over time and path shape could possibly lead to faster trajectory times under given vehicle dynamic limits, similar to finding the racing line on a racecar. Adding segment times as a decision variable however induced a nonlinearity in the constraints, requiring this formulation to be solved using SQP.&lt;/p>
&lt;p>Both formulations are summarized in detail in the report. Before full implementation I compared them on three simple scenarios including a simple 90 degree corner, a more aggressive one and an S shaped corridor as shown in the picture below. I found that while on the simple corner the SQP formulation performed similarly while also yielding the time allocation, it was less robust on the tight corner and corridor and required a different number of segments per interval for good performance. Because the environments are not known apriori, this number is hard to set. The MIQP on the other hand is more robust as the segments can be reallocated between intervals.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="test_cases" srcset="
/project/quadrotor_trajectory_planning/images/prob_form_test_cases_presn_hua6464c23f79ab2fca8d5ea6cc517e365_469058_17e06eb06d0d179885729240244d3662.webp 400w,
/project/quadrotor_trajectory_planning/images/prob_form_test_cases_presn_hua6464c23f79ab2fca8d5ea6cc517e365_469058_7c737a7ddec5790dc7e727b30a01261a.webp 760w,
/project/quadrotor_trajectory_planning/images/prob_form_test_cases_presn_hua6464c23f79ab2fca8d5ea6cc517e365_469058_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_trajectory_planning/images/prob_form_test_cases_presn_hua6464c23f79ab2fca8d5ea6cc517e365_469058_17e06eb06d0d179885729240244d3662.webp"
width="760"
height="399"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Based on these findings only the MIQP formulation was used in the full implementation. The video below shows the local planner operating in isolation in the ROS + Gazebo environment using fixed global plan and convex decomposition inputs. The RViz view in the lower left shows the full spline trajectory generated by the local planner.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="final-results">&lt;strong>Final Results&lt;/strong>&lt;/h2>
&lt;p>Due to implementation challenges with the global planner, it was necessary to integrate our convex decomposition and local planner with the JPS global planner implemented in the original FASTER implementation [2]. We tested this combination in both a small forest and office environment, which are illustrated below.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="gazebo_sim_setup" srcset="
/project/quadrotor_trajectory_planning/images/gazebo_sim_setup_collage_hu67affc286978f2c1c142dc9864db8474_122611_f32f2b99cdc4bc01829c4aba771f5530.webp 400w,
/project/quadrotor_trajectory_planning/images/gazebo_sim_setup_collage_hu67affc286978f2c1c142dc9864db8474_122611_554f7acab1abae1149b8df43bde83bc8.webp 760w,
/project/quadrotor_trajectory_planning/images/gazebo_sim_setup_collage_hu67affc286978f2c1c142dc9864db8474_122611_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_trajectory_planning/images/gazebo_sim_setup_collage_hu67affc286978f2c1c142dc9864db8474_122611_f32f2b99cdc4bc01829c4aba771f5530.webp"
width="760"
height="332"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>A sample video of the flights in the both environments is shown below. In testing we achieved maximum speeds of up to 4.2 m/s and replanning rates of up to 10 Hz. The full results summary is available in the report &lt;a href="https://mbrymer.github.io/uploads/AER_1516_Project_Report.pdf" target="_blank">here&lt;/a>.&lt;/p>
&lt;p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/w_spn4Af6mE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
$$ $$
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/p>
&lt;p>Credits for the RViz tools to visualize the polyhedra and ellipsoids go to Sikang Liu [4].&lt;/p>
&lt;h2 id="challenges">&lt;strong>Challenges&lt;/strong>&lt;/h2>
&lt;p>We encountered a number of challenges over the course of the project. The first was run time for the convex decomposition phase due to the cost of processing the incoming point cloud. Performance improved over the course of the project, but it can be seen in the videos that the decomposition still lags behind the speed of the vehicle. This delay causes the local planner to stop periodically while waiting for it to update.&lt;/p>
&lt;p>The second was the time allocation scale factor heuristic. It was found that the strategy of using infeasibility as the only stop criterion in the line search was not robust and could lead to scenarios where the factor is continually made more aggressive until the velocity traces saturate over long portions of the planning horizon. At these points the vehicle is moving so quickly that the optimization problem eventually becomes infeasible without violating the speed constraints and requires large cutbacks on the time allocation factor, creating an oscillatory mode.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="infeasibility" srcset="
/project/quadrotor_trajectory_planning/images/velocity_saturation_infeasibility_hub3f7012c9f20c712abfd93ba3efff918_20852_01c357f55a3e2907b7ab56fa623c8014.webp 400w,
/project/quadrotor_trajectory_planning/images/velocity_saturation_infeasibility_hub3f7012c9f20c712abfd93ba3efff918_20852_8a9f4365f28d0f3d746358ff3e1b679d.webp 760w,
/project/quadrotor_trajectory_planning/images/velocity_saturation_infeasibility_hub3f7012c9f20c712abfd93ba3efff918_20852_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_trajectory_planning/images/velocity_saturation_infeasibility_hub3f7012c9f20c712abfd93ba3efff918_20852_01c357f55a3e2907b7ab56fa623c8014.webp"
width="432"
height="288"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>The original authors did not mention this issue so it could be an issue of our implementation, however it seems inherent to the method. I attempted the use of soft speed constraints to alleviate the issue, but did not reach a robust solution in the time allotted.&lt;/p>
&lt;p>The last challenge was the effect of the local plan on the observability of the world. The optimization problem does not consider observability and thus does not attempt to keep the camera level or limit angular rates to reduce motion blur. It was found that this can lead to the planner commanding large vehicle angles briefly that could cause the convex decomposition to fail due to poor point cloud data.&lt;/p>
&lt;h2 id="conclusion">&lt;strong>Conclusion&lt;/strong>&lt;/h2>
&lt;p>In conclusion, we managed to produce implementations of the local planning and world decomposition components of a hierarchical quadrotor trajectory planner capable of generating flyable trajectories in simulation. While challenges and robustness issues remained, this was still a great opportunity for me to practice motion planning, solving problems via optimization and ROS implementation.&lt;/p>
&lt;h2 id="references">&lt;strong>References&lt;/strong>&lt;/h2>
&lt;p>[1] - J. Tordesillas and J. P. How, “FASTER: Fast and safe trajectory
planner for navigation in unknown environments,” IEEE Transactions
on Robotics, 2021.&lt;/p>
&lt;p>[2] - J. Tordesillas, “FASTER: Fast and Safe Trajectory Planner for Navigation in Unknown Environments.” &lt;a href="https://github.com/mit-acl/faster" target="_blank" rel="noopener">https://github.com/mit-acl/faster&lt;/a>, 2021.&lt;/p>
&lt;p>[3] - &lt;a href="https://gitlab.com/mit-acl/lab/acl-gazebo" target="_blank" rel="noopener">https://gitlab.com/mit-acl/lab/acl-gazebo&lt;/a>&lt;/p>
&lt;p>[4] - S. Liu, &amp;ldquo;MRSL Decomp Util ROS.&amp;rdquo; &lt;a href="https://github.com/sikang/DecompROS" target="_blank" rel="noopener">https://github.com/sikang/DecompROS&lt;/a>, 2018.&lt;/p></description></item></channel></rss>