<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer Vision | Matt Brymer</title><link>https://mbrymer.github.io/tag/computer-vision/</link><atom:link href="https://mbrymer.github.io/tag/computer-vision/index.xml" rel="self" type="application/rss+xml"/><description>Computer Vision</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 29 Aug 2022 00:00:00 +0000</lastBuildDate><image><url>https://mbrymer.github.io/media/icon_hu1de1b76137c20b64cb0e309cf8549bbd_20734_512x512_fill_lanczos_center_3.png</url><title>Computer Vision</title><link>https://mbrymer.github.io/tag/computer-vision/</link></image><item><title>Visual-Inertial Relative Pose Estimation for Quadrotor Landing</title><link>https://mbrymer.github.io/project/quadrotor_relative_pose_estimation/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://mbrymer.github.io/project/quadrotor_relative_pose_estimation/</guid><description>&lt;p>&lt;a href="https://github.com/mbrymer/quadrotor_landing" target="_blank" rel="noopener">&lt;strong>GitHub Repo&lt;/strong>&lt;/a> &lt;strong>| &lt;a href="https://mbrymer.github.io/uploads/AER1810_Project_Report.pdf" target="_blank">Project Report&lt;/a>&lt;/strong>&lt;/p>
&lt;p>This was my final project at UTIAS where I developed a visual-inertial estimation algorithm for estimating the relative pose of a quadrotor over a landing pad and deployed it on a custom hardware platform.&lt;/p>
&lt;h2 id="overview">&lt;strong>Overview&lt;/strong>&lt;/h2>
&lt;p>This work was performed as part of an overarching personal project to build a quadrotor from hobby grade components capable of autonomously taking off, flying to a target GPS location and then executing a precision landing on a landing pad at that location. One of the most crucial aspects of this system is deriving an accurate estimate of the vehicle relative pose for control of the final landing phase. Low cost GPS units typically only achieve horizontal position accuracies on the order of 2.5 m [1], which is good for general purpose or return to launch flight but insufficient for a precise landing.&lt;/p>
&lt;p>More accurate measurements of the relative pose can be achieved via vision with an onboard camera, which has been well explored in the literature [2][3]. These pose measurements can then be fused with IMU data to achieve a high rate state estimate. Thus for this project I investigated developing a visual-inertial estimation algorithm for implementation on a low cost, hobby grade quadrotor.&lt;/p>
&lt;h2 id="approach">&lt;strong>Approach&lt;/strong>&lt;/h2>
&lt;h4 id="filter-architecture-and-software-implementation">Filter Architecture and Software Implementation&lt;/h4>
&lt;p>To simplify the vision problem I placed an AprilTag 3 fiducial marker on the landing pad, which is commonly used in robotics and allows the full 6 DoF pose to be estimated with a monocular camera [4]. For this problem I assumed the landing pad remained fixed, so the quantities to be estimated are the position and orientation of the vehicle. The picture below shows the overall estimation problem and coordinate frames involved including the tag or inertial frame, $\overset{\rightharpoonup}{\mathcal{F}_t}$ , the vehicle frame, $\overset{\rightharpoonup}{\mathcal{F}_v}$ , and the camera frame, $\overset{\rightharpoonup}{\mathcal{F}_c}$ .&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="state" srcset="
/project/quadrotor_relative_pose_estimation/images/state_illustration_final_hu7e0ae66df1eb436440d166f2f3f6faf2_1951896_d1be883e0b955da9a9c81435f668e7ae.webp 400w,
/project/quadrotor_relative_pose_estimation/images/state_illustration_final_hu7e0ae66df1eb436440d166f2f3f6faf2_1951896_46ff4a13eaca01462b88432e58d73c54.webp 760w,
/project/quadrotor_relative_pose_estimation/images/state_illustration_final_hu7e0ae66df1eb436440d166f2f3f6faf2_1951896_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_relative_pose_estimation/images/state_illustration_final_hu7e0ae66df1eb436440d166f2f3f6faf2_1951896_d1be883e0b955da9a9c81435f668e7ae.webp"
width="728"
height="760"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>I used a Multiplicative Extended Kalman Filter[5] to estimate both the relative pose in the form of a position vector and attitude quaternion as well as the IMU biases. One of the key points is that this framework breaks the state up into a nominal and perturbation component that allows the rotation(Lie Group) to be estimated with a conventional Kalman Filter, which is normally limited to vector spaces. The perturbation component is used to capture the probabilistic uncertainty in the pose, and is expressed in the tangent space of the group(Lie Algebra) which forms a vector space in which the Kalman Filter operates and the corrections occur.&lt;/p>
&lt;p>The equations below show how this nominal-perturbation split is performed for the states, where $\delta\boldsymbol{\theta}$ represents the rotation perturbation vector. The full details of the derivation are available in the &lt;a href="https://mbrymer.github.io/uploads/AER1810_Project_Report.pdf" target="_blank">report&lt;/a> for those interested.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp; \textbf{r}_t^{vt} = \bar{\textbf{r}}_t^{vt} + \delta\textbf{r} &amp;amp; &amp;amp; \textbf{v}_t^{vt} = \bar{\textbf{v}}_t^{vt} + \delta\textbf{v} &amp;amp; \\
&amp;amp; \textbf{q}_{tv} = \bar{\textbf{q}}_{tv} \otimes \delta\textbf{q} &amp;amp; &amp;amp; \textbf{C}_{tv} = \bar{\textbf{C}}_{tv}\delta \textbf{C} &amp;amp; \\
&amp;amp; \textbf{a}_b = \bar{\textbf{a}}_b + \delta \textbf{a}_b &amp;amp; &amp;amp; \boldsymbol{\omega}_b = \bar{\boldsymbol{\omega}}_b + \delta \boldsymbol{\omega}_b &amp;amp; \\
&amp;amp; \delta\textbf{q} = \exp{\frac{\delta\boldsymbol{\theta}}{2}} &amp;amp; &amp;amp; \delta \textbf{C} = \exp{[\delta\boldsymbol{\theta}]_\times} &amp;amp;
\end{align*}
$$&lt;/p>
&lt;p>I implemented the filter in a C++ ROS node, which takes IMU data and the pose of the detected tag bundle from the AprilTag ROS node [5] as inputs and performs the filtering steps to output the estimated relative pose and covariance. The tag detections reach the filter with a significant delay due to all the steps in the image processing pipeline, which was on the order of 0.15-0.25 s in the hardware setup. For this reason the state history is stored at each filter update and the tag detections when received are fused to a past state based on the estimated delay. After this the prior history is discarded and the prediction steps are recalculated to determine the estimate at the current time.&lt;/p>
&lt;h4 id="hardware-platform">Hardware Platform&lt;/h4>
&lt;p>The filter was deployed on a custom quadrotor platform illustrated below. Flight control is performed by the Holybro Kakute F7 flight controller running ArduPilot 4.2.2 and the filter runs on a NVIDIA Jetson Nano 4GB using images from an industrial machine vision camera. The vehicle has a total mass of 1.115 kg and estimated maximum thrust of 36.9 N based on data from the motor manufacturer, leading to a thrust to weight ratio of approximately 3.4.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="vehicle" srcset="
/project/quadrotor_relative_pose_estimation/images/hardware_platform_annotated_hud8a73b22106595b1eb79b8a149d1b67c_2975861_983060cad5de364e91b5fb8262cbd082.webp 400w,
/project/quadrotor_relative_pose_estimation/images/hardware_platform_annotated_hud8a73b22106595b1eb79b8a149d1b67c_2975861_c9ec6a45fbe2c9133342f30020de446c.webp 760w,
/project/quadrotor_relative_pose_estimation/images/hardware_platform_annotated_hud8a73b22106595b1eb79b8a149d1b67c_2975861_1200x1200_fit_q100_h2_lanczos.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_relative_pose_estimation/images/hardware_platform_annotated_hud8a73b22106595b1eb79b8a149d1b67c_2975861_983060cad5de364e91b5fb8262cbd082.webp"
width="760"
height="231"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>To make the image processing time tractable, the camera image is downsampled to 640x480 to allow the AprilTag ROS node to produce detections at approximately 15 Hz. A custom landing target was designed consisting of a bundle of 13 AprilTags of different sizes within an overall 0.84 m wide square, which allows for some of the tags to remain visible while the vehicle is offset laterally.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="target" srcset="
/project/quadrotor_relative_pose_estimation/images/target_hu5fed5c2255b04833853b631dec19a914_102918_c26f54fc6d0cf6679f0f6c4c67878a3d.webp 400w,
/project/quadrotor_relative_pose_estimation/images/target_hu5fed5c2255b04833853b631dec19a914_102918_d198509b1ffe3e65b65ba7a49bd4e625.webp 760w,
/project/quadrotor_relative_pose_estimation/images/target_hu5fed5c2255b04833853b631dec19a914_102918_1200x1200_fit_q100_h2_lanczos.webp 1200w"
src="https://mbrymer.github.io/project/quadrotor_relative_pose_estimation/images/target_hu5fed5c2255b04833853b631dec19a914_102918_c26f54fc6d0cf6679f0f6c4c67878a3d.webp"
width="449"
height="500"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="validation">&lt;strong>Validation&lt;/strong>&lt;/h2>
&lt;h4 id="simulation">Simulation&lt;/h4>
&lt;p>The filter was first validated in simulation using the TRAILab fork of the RotorS simulator [6] before testing in hardware. The simulator provides both the dynamics of the vehicle as well as implementing a low-level rate and attitude controller. The flight was simulated using prerecorded open loop transmitter inputs for manual sweeping flights over the AprilTag target at heights of 2 m and 4 m. The video below for the 2 m case shows the estimated and ground truth pose visualized with RViz as well as the simulated camera view with the AprilTag detection overlaid.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>The filter generally tracks the ground truth position and orientation well, with estimation errors below approximately 0.050 m as long as detection is maintained. The cameras loses sight of the tag multiple times during the run at the edges of its sweeping trajectory, leading to drift in the state estimate. In this example we at one point observe a drift of 0.61 m in the Y position estimate after 2.5 s of lost detection around 32 s into the event. While not ideal, this is a relatively long interval to go without correction from measurements.&lt;/p>
&lt;p>Additional details of the orientation estimate and filter consistency are available in the &lt;a href="https://mbrymer.github.io/uploads/AER1810_Project_Report.pdf" target="_blank">report&lt;/a>.&lt;/p>
&lt;h4 id="hardware-testing">Hardware Testing&lt;/h4>
&lt;p>The filter was then validated via outdoor flight tests on the quadrotor platform under manual flight. Two cases were evaluated, including a sweeping flight back and forth over the target as well as a full landing. The height in the sweeping flight case varied between 1 - 2.5 m while the landing case began from a height of approximately 4 m. &lt;strong>Update these numbers to match the videos&lt;/strong>.&lt;/p>
&lt;p>Videos of both cases are shown below. These show ground and onboard camera views on the left along with the RViz visualization of the state estimate and time traces on the right.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>$$ $$&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>No ground truth available. Predicts these values, I think they&amp;rsquo;re good.&lt;/p>
&lt;p>Lose detection at these points, leading to XYZ amount of drift&lt;/p>
&lt;p>The filter was additionally evaluated indoors when moving the vehicle around by hand, the results of which are summarized in the &lt;a href="https://mbrymer.github.io/uploads/AER1810_Project_Report.pdf" target="_blank">report&lt;/a>.&lt;/p>
&lt;h2 id="challenges">&lt;strong>Challenges&lt;/strong>&lt;/h2>
&lt;p>A number of challenges were encountered through development that currently limit performance of the filter:&lt;/p>
&lt;ul>
&lt;li>The delay in the pose measurements significantly affects filter performance as the pose drives what state the IMU prediction propagates from
&lt;ul>
&lt;li>Exact delay time is uncertain due to camera not supporting software trigger. Delay is currently estimated via approximate time stamp plus a constant offset&lt;/li>
&lt;li>A study on the effect of delay time is available in the &lt;a href="https://mbrymer.github.io/uploads/AER1810_Project_Report.pdf" target="_blank">report&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The AprilTag detector has a tendency to produce spurious rotation estimates when a tag in the bundle is close to the edge of the image
&lt;ul>
&lt;li>Tag can be detected when not fully in image, but are clipped to lie in image skewing the orientation&lt;/li>
&lt;li>Filtering strategy employed was insufficient to entirely eliminate this issue&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Drift in the estimate on lost detections remains a challenge and is negatively influenced by both of the above issues
&lt;ul>
&lt;li>The lack of orientation feedback under lost detections also leads orientation errors to produce an acceleration bias due to gravity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Visibility of the tag under bright sunlight, leading to lost detections at higher heights even when the tag is fully in view&lt;/li>
&lt;/ul>
&lt;h2 id="conclusions-and-future-work">&lt;strong>Conclusions and Future Work&lt;/strong>&lt;/h2>
&lt;p>Despite these challenges, I still managed to produce a filter capable of achieving good visual-inertial estimation performance as long as detections are maintained. The performance is sufficient to deploy with a relative position controller and state machine for executing relative motions and landing maneuvers under nominal conditions, which is the next phase of the project.&lt;/p>
&lt;p>Some of the planned future work on improving the performance of the relative pose filter includes:&lt;/p>
&lt;ul>
&lt;li>Add additional measurements to improve robustness to lost detections. Possible options include:
&lt;ul>
&lt;li>Orientation reference, possibly from a simpler IMU only method such as the Mahony filter [7]&lt;/li>
&lt;li>Barometer to provide height feedback, possibly with a bias term&lt;/li>
&lt;li>Possibly consider using a motor thrust model, which allows moving accelerometer measurements to measurement side of the EKF&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Updating to a more advanced filter architecture such as a Sigma Point or Iterated Extended Kalman Filter&lt;/li>
&lt;li>Improve rejection of bad AprilTag orientation detections&lt;/li>
&lt;li>Moving to GPU implementation of AprilTag detector to potentially reduce need for downsampling, increase run rate or reduce delay time&lt;/li>
&lt;/ul>
&lt;h2 id="references">&lt;strong>References&lt;/strong>&lt;/h2>
&lt;p>[1] u-blox &lt;a href="https://content.u-blox.com/sites/default/files/SAM-M8Q_DataSheet_%28UBX-16012619%29.pdf" target="_blank" rel="noopener">SAM-M8Q Data Sheet&lt;/a>&lt;/p>
&lt;p>[2] K. Ling, D. Chow, A. Das, and S. L. Waslander, “Autonomous maritime landings for low-cost
VTOL aerial vehicles,” in 2014 Canadian Conference on Computer and Robot Vision, pp. 32–39,
2014.&lt;/p>
&lt;p>[3] A. Paris, B. T. Lopez, and J. P. How, “Dynamic landing of an autonomous quadrotor on a moving
platform in turbulent wind conditions.” &lt;a href="https://arxiv.org/abs/1909.11071" target="_blank" rel="noopener">https://arxiv.org/abs/1909.11071&lt;/a>, 2019.&lt;/p>
&lt;p>[4] M. Krogius, A. Haggenmiller, and E. Olson, “Flexible Layouts for Fiducial Tags,” in 2019
IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), pp. 1898–1903,
2019.&lt;/p>
&lt;p>[5] F. L. Markley, “Attitude Error Representations for Kalman Filtering,” Journal of Guidance,
Control, and Dynamics, vol. 26, no. 2, pp. 311–317, 2003.&lt;/p>
&lt;p>[6] F. Furrer, M. Burri, M. Achtelik, and R. Siegwart, Robot Operating System (ROS): The Complete
Reference (Volume 1), ch. RotorS—A Modular Gazebo MAV Simulator Framework, pp. 595–625.
Cham: Springer International Publishing, 2016.&lt;/p>
&lt;p>[7] R. Mahony, T. Hamel, and J.-M. Pflimlin, “Nonlinear complementary filters on the special orthogonal
group,” IEEE Transactions on Automatic Control, vol. 53, no. 5, pp. 1203–1218, 2008.&lt;/p></description></item></channel></rss>